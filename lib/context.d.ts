import { Observable } from "rxjs";
import { Element } from "./element";
import { ClipPath } from "./elements/non-renderables/clip-path";
import { Marker } from "./elements/non-renderables/marker";
import { Mask } from "./elements/non-renderables/mask";
import { LinearGradient } from "./elements/non-renderables/paint-servers/gradients/linear";
import { RadialGradient } from "./elements/non-renderables/paint-servers/gradients/radial";
import { Pattern } from "./elements/non-renderables/paint-servers/pattern";
import { ExternalSVG } from "./elements/renderables/external";
import { ForeignObject } from "./elements/renderables/foreign-object";
import { Group } from "./elements/renderables/group";
import { Image } from "./elements/renderables/image";
import { Circle } from "./elements/renderables/shapes/circle";
import { Ellipse } from "./elements/renderables/shapes/ellipse";
import { Line } from "./elements/renderables/shapes/line";
import { Path } from "./elements/renderables/shapes/path";
import { Polygon } from "./elements/renderables/shapes/polygon";
import { Polyline } from "./elements/renderables/shapes/polyline";
import { Rect } from "./elements/renderables/shapes/rect";
import { Text } from "./elements/renderables/text";
import { ResolvedPointEvent } from "./events";
import { ElementArgumentsType, ElementConstructorArgumentsType } from "./util";
export declare class Context {
    private _window;
    static DEFAULT_WINDOW: Window;
    static readonly contexts: Observable<Context>;
    private static _CONTEXT_SUBJECT;
    private _root;
    private _defs;
    constructor();
    constructor(id: string, window?: Window);
    constructor(el: SVGSVGElement, window?: Window);
    readonly root: SVGSVGElement;
    readonly window: Window;
    calculateLocalPoint<ELEMENT extends SVGGraphicsElement>(elementNode: ELEMENT, action: MouseEvent | Touch): DOMPoint;
    readonly mousePosition: Observable<ResolvedPointEvent>;
    addDef(def: SVGElement | Element<SVGElement>): void;
    addChild(el: SVGElement | Element<SVGElement>): void;
    load(url: string): Promise<ExternalSVG>;
    clipPath(...args: ElementConstructorArgumentsType<typeof ClipPath>): ClipPath;
    marker(...args: ElementConstructorArgumentsType<typeof Marker>): Marker;
    mask(...args: ElementConstructorArgumentsType<typeof Mask>): Mask;
    linearGradient(...args: ElementConstructorArgumentsType<typeof LinearGradient>): LinearGradient;
    radialGradient(...args: ElementConstructorArgumentsType<typeof RadialGradient>): RadialGradient;
    pattern(...args: ElementConstructorArgumentsType<typeof Pattern>): Pattern;
    foreignObject(...args: ElementConstructorArgumentsType<typeof ForeignObject>): ForeignObject;
    group(...args: ElementConstructorArgumentsType<typeof Group>): Group;
    imageAfterLoad(...args: ElementArgumentsType<typeof Image.afterLoad>): Promise<Image>;
    circle(...args: ElementConstructorArgumentsType<typeof Circle>): Circle;
    ellipse(...args: ElementConstructorArgumentsType<typeof Ellipse>): Ellipse;
    line(...args: ElementConstructorArgumentsType<typeof Line>): Line;
    path(...args: ElementConstructorArgumentsType<typeof Path>): Path;
    polygon(...args: ElementConstructorArgumentsType<typeof Polygon>): Polygon;
    polyline(...args: ElementConstructorArgumentsType<typeof Polyline>): Polyline;
    rect(...args: ElementConstructorArgumentsType<typeof Rect>): Rect;
    text(...args: ElementConstructorArgumentsType<typeof Text>): Text;
}
